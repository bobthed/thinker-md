/*! thinker-md 31-03-2015 */
var howto='# 1. \u5f00\u53d1\u8005\u6307\u5357\n\n### 1.1 \u5b89\u88c5Grunt\u63d2\u4ef6\n\u53c2\u8003:\n    [Nodejs \u6587\u6863](https://nodejs.org/documentation/)\n    [Grunt \u4e2d\u6587\u793e\u533a](http://www.gruntjs.org/)\n\n\u8fdb\u5165thinker-md\u6839\u76ee\u5f55\uff0c\u6267\u884c\u5982\u4e0b\u547d\u4ee4\uff1a\n```Nodejs\nnpm install\n```\n\n### 1.2 \u7f16\u8bd1\n```Nodejs\ngrunt watch\n```\n\u7f16\u8bd1\u540e\u4f1a\u751f\u6210\u5982\u4e0b\u76ee\u5f55\n|dist\n|----javascript\n|--------user\n|------------thinker-md-user.js\n|------------thinker-md-user.min.js\n|------------thinker-md-user.min.map\n|--------vendor\n|------------jquery-2.1.3.js\n|------------thinker-md.js\n|------------thinker-md.min.js\n|------------thinker-md.min.map\n|----stylesheets\n|--------fonts\n|------------fontawesome-webfont.eot\n|------------glyphicons-halflings-regular.eot\n|------------...\n|--------img\n|--------user\n|------------thinker-md.user.min.css\n|--------vendor\n|------------thinker-md.min.css\n\n\n# 2. \u7528\u6237\u6307\u5357\n\n> thinker-md \u4f9d\u8d56jquery\u5e93\u3002\u63a8\u8350\u4f7f\u7528\u6700\u65b0\u7248jquery 1.x\u6216\u80052.x\n\n### \u9875\u9762\u5f15\u5165\n_\u53c2\u7167/view/index.html\u548c/view/develop.html_\n- index.html\u9ed8\u8ba4\u5f15\u7528\u7f16\u8bd1\u4e4b\u540e\u7684js\u548ccss\u8d44\u6e90\u3002\n- \u5982\u679c\u9700\u8981\u5b9a\u5236thinker-md\uff0c\u4f60\u9700\u8981\u6309\u7167 **\u5f00\u53d1\u8005\u6307\u5357** \u6b65\u9aa4\u6267\u884c\u547d\u4ee4\uff0c\u5207\u6362\u5230develop.html\u3002\u6240\u6709\u8d44\u6e90\u7684\u4fee\u6539\u4f1a\u81ea\u52a8\u751f\u6210\u5230dist\u76ee\u5f55\u4e0b\u3002\n\n# 3. \u4f7f\u7528\n\n### 3.1 \u4f7f\u7528\u6848\u4f8b\n```html\n<!DOCTYPE html>\n<html>\n<head lang="zh">\n    <meta charset="UTF-8">\n    <title>Thinker-md</title>\n</head>\n<body>\n    <textarea id="md" data-provide="markdown"></textarea>\n<link href="../dist/stylesheets/user/thinker-md.user.min.css" rel="stylesheet">\n<link href="../dist/stylesheets/vendor/thinker-md.min.css" rel="stylesheet">\n<script src="../dist/javascripts/vendor/jquery-2.1.3.js" type="text/javascript"></script>\n<script src="../dist/javascripts/vendor/thinker-md.js" type="text/javascript"></script>\n<script>\n    $("#md").markdown({\n    language: \'zh\',\n    fullscreen: {\n        enable: true\n    },\n    resize:\'vertical\',\n    localStorage:\'md\',\n    imgurl: \'http://192.168.1.142:8080/upload\',\n    base64url: \'http://192.168.1.142:8080/base64\'\n});\n</script>\n</body>\n</html>\n```\n\n\n### 3.2 \u914d\u7f6e\u53c2\u6570\u8bf4\u660e\n|\u53c2\u6570\u540d\u79f0|\u7c7b\u578b|\u8bf4\u660e|\n|:----| :---- | :----|\n|`autofocus`|`boolean`|\u7f16\u8f91\u5668\u521d\u59cb\u540e\u662f\u5426\u9ed8\u8ba4\u83b7\u53d6\u7126\u70b9\u3002 \u9ed8\u8ba4 `false`|\n|`savable`|`boolean`|\u7f16\u8f91\u5668\u662f\u5426\u663e\u793a\u5e76\u6fc0\u6d3b\u4fdd\u5b58\u6309\u94ae\u3002 \u9ed8\u8ba4 `false`|\n|`hideable`|`boolean`|\u5982\u679c\u8bbe\u7f6e `true` \uff0c\u7f16\u8f91\u5668\u5728 `blur` \u4e8b\u4ef6\u540e\u81ea\u52a8\u9690\u85cf\u3002 \u9ed8\u8ba4 `false`|\n|`width`|`mixed`|\u7f16\u8f91\u5668\u5bbd\u5ea6\u3002 \u9ed8\u8ba4 `inherit` \u652f\u6301\u6570\u5b57\u7c7b\u578b (\u5728`css`\u5145\u8bb8\u8303\u56f4), \u6216bootstrap\u6837\u5f0f (\u5982 `span2`)|\n|`height`|`mixed`|\u7f16\u8f91\u5668\u9ad8\u5ea6\u3002 \u9ed8\u8ba4 `inherit`|\n|`resize`|`string`|\u7981\u7528\u6216\u6539\u53d8 `resize` \u5c5e\u6027, \u53ef\u80fd\u7684\u503c `none`,`both`,`horizontal`,`vertical`\u3002 \u9ed8\u8ba4 `none` \u5982\u679c\u6b64\u5c5e\u6027\u672a\u88ab\u7981\u6b62, \u7528\u6237\u53ef\u4ee5\u9884\u89c8\u65f6\u6539\u53d8\u7f16\u8f91\u5668\u9ad8\u5ea6\u3002|\n|`language`|`string`|\u672c\u5730\u8bed\u8a00\u8bbe\u7f6e\u3002 \u9ed8\u8ba4 `zh`|\n|`footer`|`mixed`|\u7f16\u8f91\u5668\u5e95\u90e8\u680f. \u53ef\u80fd\u7684\u503c `string`,`callback`\u3002 \u9ed8\u8ba4\u4e3a\u7a7a|\n|`fullscreen`|`object`| `enable` (`bool`)|\n|`hiddenButtons`|`mixed`|\u6309\u94ae\u540d\u5b57\u6570\u7ec4\u6216\u5b57\u7b26\u4e32\u3002 \u9ed8\u8ba4\u4e3a\u7a7a\u5b57\u7b26\u4e32|\n|`disabledButtons`|`mixed`|\u6309\u94ae\u540d\u5b57\u6570\u7ec4\u6216\u5b57\u7b26\u4e32\u3002 \u9ed8\u8ba4\u4e3a\u7a7a\u5b57\u7b26\u4e32|\n|`localStorage`|`string`|HTML5\u672c\u5730\u5b58\u50a8\uff0c\u5168\u5c40\u552f\u4e00|\n|`imgurl`|`url`|\u56fe\u50cf\u4e0a\u4f20\u5730\u5740|\n|`base64url`|`url`|base64\u7f16\u7801\u683c\u5f0f\u56fe\u50cf\u4e0a\u4f20\u5730\u5740|\n\n### 3.2.1 java\u7248\u4e0a\u4f20\u4ee3\u7801\u5b9e\u73b0\n\n\u666e\u901a\u56fe\u50cf\u4e0a\u4f20\u6848\u4f8b\n```java\npackage net.oschina.servlet;\n\nimport org.apache.commons.fileupload.FileItem;\nimport org.apache.commons.fileupload.FileItemFactory;\nimport org.apache.commons.fileupload.FileUploadException;\nimport org.apache.commons.fileupload.disk.DiskFileItemFactory;\nimport org.apache.commons.fileupload.servlet.ServletFileUpload;\n\nimport javax.servlet.ServletException;\nimport javax.servlet.annotation.WebInitParam;\nimport javax.servlet.annotation.WebServlet;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\nimport java.io.File;\nimport java.io.IOException;\nimport java.io.OutputStream;\nimport java.util.Iterator;\n\n/**\n * Created by ling on 2014/11/11.\n */\n@WebServlet(name = "upload", urlPatterns = "/upload", initParams = {@WebInitParam(name = "upload_path", value = "\\\\ImageDir")})\npublic class UploadServlet extends javax.servlet.http.HttpServlet {\n\n    @Override\n    protected void doOptions(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {\n        resp.addHeader("Access-Control-Allow-Origin", "*");\n        resp.addHeader("Access-Control-Allow-Methods", "GET,POST,OPTIONS");\n        resp.addHeader("Access-Control-Allow-Headers", "Cache-Control,X-Requested-With,Content-Type");\n        super.doOptions(req,resp);\n    }\n\n\n    @Override\n    protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {\n        this.doPost(req, resp);\n    }\n\n    @Override\n    protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {\n        req.setCharacterEncoding("UTF-8");\n        boolean isMultipart = ServletFileUpload.isMultipartContent(req);\n        if (isMultipart) {\n            FileItemFactory fileItemFactory = new DiskFileItemFactory();\n            ServletFileUpload servletFileUpload = new ServletFileUpload(fileItemFactory);\n\n            Iterator<FileItem> items;\n\n            try {\n                items = servletFileUpload.parseRequest(req).iterator();\n                while (items.hasNext()) {\n                    FileItem item = items.next();\n                    if (!item.isFormField()) {\n                        //\u6587\u4ef6\u540d\u79f0\n                        String name = item.getName();\n                        String fileName = name.substring(name.lastIndexOf(\'\\\\\') + 1, name.length());\n                        String directory = req.getSession().getServletContext().getRealPath("/ImageDir");\n\n                        StringBuilder path = new StringBuilder();\n                        path.append(directory);\n                        path.append(File.separator);\n                        path.append(fileName);\n\n                        //\u4e0a\u4f20\u6587\u4ef6\n                        File file = new File(path.toString());\n                        File dir = file.getParentFile();\n                        if (!dir.exists() && !dir.isDirectory()) {\n                            dir.mkdir();\n                        }\n                        item.write(file);\n\n\n                        StringBuilder imgUrl = new StringBuilder("http://localhost:8080/ImageDir/");\n                        imgUrl.append(fileName);\n\n                        resp.addHeader("Access-Control-Allow-Origin", "*");\n                        resp.setContentType("text/json; charset=UTF-8");\n                        OutputStream outputStream = resp.getOutputStream();\n                        outputStream.write(imgUrl.toString().getBytes("UTF-8"));\n\n                        outputStream.flush();\n                        outputStream.close();\n                    }\n                }\n            } catch (FileUploadException e) {\n                e.printStackTrace();\n            } catch (Exception e) {\n                e.printStackTrace();\n            }\n        }\n    }\n}\n```\n\nbase64\u56fe\u50cf\u4e0a\u4f20\u6848\u4f8b\n```java\npackage net.oschina.servlet;\n\nimport javax.servlet.ServletException;\nimport javax.servlet.annotation.MultipartConfig;\nimport javax.servlet.annotation.WebInitParam;\nimport javax.servlet.annotation.WebServlet;\nimport javax.servlet.http.HttpServlet;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\nimport javax.servlet.http.Part;\nimport java.io.*;\nimport java.util.Base64;\nimport java.util.Date;\n\n/**\n * Created by ling on 2015/3/16.\n */\n@WebServlet(name = "base64", urlPatterns = "/base64", initParams = {@WebInitParam(name = "upload_path", value = "\\\\ImageDir")})\n@MultipartConfig(fileSizeThreshold = 1024 * 1024 * 2, // 2MB\n        maxFileSize = 1024 * 1024 * 10,      // 10MB\n        maxRequestSize = 1024 * 1024 * 50)   // 50MB\npublic class Base64Servlet extends HttpServlet {\n    @Override\n    protected void doOptions(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {\n        resp.addHeader("Access-Control-Allow-Origin", "*");\n        resp.addHeader("Access-Control-Allow-Methods", "GET,POST,OPTIONS");\n        resp.addHeader("Access-Control-Allow-Headers", "Cache-Control,X-Requested-With,Content-Type");\n        super.doOptions(req, resp);\n    }\n\n    protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {\n        req.setCharacterEncoding("UTF-8");\n        resp.addHeader("Access-Control-Allow-Origin", "*");\n        resp.setContentType("text/json; charset=UTF-8");\n        OutputStream outputStream = resp.getOutputStream();\n        //\u6587\u4ef6\u540d\u79f0\n        String fileName = new Date().getTime() + ".png";\n        String directory = req.getSession().getServletContext().getRealPath("/ImageDir");\n        StringBuilder path = new StringBuilder();\n        path.append(directory);\n        path.append(File.separator);\n        path.append(fileName);\n        for (Part part : req.getParts()) {\n            StringBuilder base64Data = new StringBuilder();\n            Reader reader = new InputStreamReader(part.getInputStream(), "UTF-8");\n            char[] buffer = new char[1024];\n            int read;\n            while ((read = reader.read(buffer)) != -1) {\n                base64Data.append(buffer, 0, read);\n            }\n            reader.close();\n            String base64 = base64Data.toString();\n            if (null != base64 && !"".equals(base64.trim())) {\n                base64 = base64.substring(base64.lastIndexOf(\',\') + 1);\n                byte[] b = Base64.getDecoder().decode(base64.getBytes());\n                BufferedOutputStream bos;\n                FileOutputStream fos;\n                File file = new File(path.toString());\n                fos = new FileOutputStream(file);\n                bos = new BufferedOutputStream(fos);\n                bos.write(b);\n                fos.flush();\n                fos.close();\n                bos.flush();\n                bos.close();\n                StringBuilder imgUrl = new StringBuilder("http://localhost:8080/ImageDir/");\n                imgUrl.append(fileName);\n                outputStream.write(imgUrl.toString().getBytes("UTF-8"));\n            }\n        }\n\n        outputStream.flush();\n        outputStream.close();\n\n    }\n\n    protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {\n        this.doPost(request, response);\n    }\n}\n```\n\n';$("#md").markdown({language:"zh",fullscreen:{enable:!0},resize:"vertical",localStorage:"md",imgurl:"http://192.168.1.142:8080/upload",base64url:"http://192.168.1.142:8080/base64",disabledButtons:{groupUtil:"cmdPreview"}}).val(howto),$("#tmd").markdown({language:"zh",fullscreen:{enable:!0},resize:"vertical",textMarkdown:!0,imgurl:"http://192.168.1.142:8080/upload",base64url:"http://192.168.1.142:8080/base64",disabledButtons:["cmdPreview"]});
//# sourceMappingURL=thinker-md-user.min.map